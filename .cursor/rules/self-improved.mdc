---
alwaysApply: false
---
# 每次修改本檔案時，都檢查全部範圍內是否存在多處語焉不詳(敘述模糊，請補充具體感)、語意衝突(後話和前話化打架)。如果發現後請指出並與我討論修改內容的去留。


# Cursor Rules 撰寫指南與範本

> **文件目的**：本文件旨在為團隊提供一個標準化的範本和最佳實踐，用於建立高品質、高可讀性、高可維護性的 `.cursorrules` 檔案。日後所有新建的規則檔案都應遵循此指南。

---

## 為什麼需要統一的規則撰寫格式？

根據業界最佳實踐，如 [awesome-cursorrules](https://github.com/PatrickJS/awesome-cursorrules/tree/main) 所展示的，標準化的規則能帶來以下好處：

1.  **高可讀性 (High Readability)**：讓任何團隊成員都能快速理解規則的意圖和內容。
2.  **高可維護性 (High Maintainability)**：當專案需求變更時，能輕鬆地更新和擴充規則。
3.  **高重用性 (High Reusability)**：讓規則可以輕易地被複製或修改，應用於不同的專案或模組。
4.  **提升 AI 協作效率**：結構清晰的規則能讓 AI 更精準地理解並執行指令。

---

## `.cursorrules` 檔案結構範本

請複製以下範本作為新規則檔案的起點。這能確保所有規則檔案都具有一致的結構。

```markdown
---
[保留此處IDE預設的formater]
---


# 規則主題：[例如：前端路由管理]

> **簡短描述**：此規則文件的目的、適用範圍（例如：僅適用於 Nuxt 專案的前端部分）。
> **最後更新**：YYYY-MM-DD

---

## 1. 核心原則

*   **原則一**：[例如：所有頁面導航必須使用 `utils/routes.ts` 中的具名路由。]
*   **原則二**：[例如：路由命名需遵循 `page-feature-action` 的格式。]
*   **原則三**：[說明制定這些原則背後的主要原因，例如「為了型別安全與集中管理」。]
可視情況追加更多原則


---

## 2. 規則詳述

### 2.1 [規則分類一，例如：路由函式定義]

*   [詳細規則說明...]
*   [詳細規則說明...]

### 2.2 [規則分類二，例如：導航實作]

*   [詳細規則說明...]

---


## 3. 相關資源

*   [相關的內部文件連結]
*   [相關的外部官方文件連結]
```

---

## 最佳實踐 (Best Practices)

1.  **保持模組化 (Stay Modular)**
    *   避免建立一個包含所有規則的巨大檔案。應按功能或領域拆分，例如：
        *   `frontend-rules.mdc`
        *   `backend-api-rules.mdc`
        *   `testing-guidelines.mdc`
    *   可以從 [awesome-cursorrules](https://github.com/PatrickJS/awesome-cursorrules/tree/main) 中尋找靈感。

2.  **優先考慮可讀性 (Prioritize Readability)**
    *   使用清晰的標題和列表。
    *   善用 Markdown 的 `**粗體**` 和 `` `程式碼` `` 格式來強調重點。
    *   語言應簡潔明瞭，為團隊成員而寫，而不只是為 AI。

3.  **說明制定規則的「原因 (Why)」**
    *   在「核心原則」中，不僅要說明「是什麼」規則，更要解釋「為什麼」要這樣規定。這有助於建立團隊共識，也讓 AI 能更好地理解上下文。

4.  **定期審視與更新 (Review and Update Regularly)**
    *   規則並非一成不變。建議定期（例如每季）檢視規則是否依然適用，並更新文件中的「最後更新」日期。
---