---
alwaysApply: false
---
# Cursor Rules 總體規範

> **文件目的**：本文件是專案內所有 `.cursor/rules/` 的最高指導原則。它定義了規則的命名結構、存放位置、內容範本與應用策略。所有團隊成員在新增或修改規則時，都應遵循此文件。

---

## 1. 核心理念

為了讓 AI 助理能最有效地協助我們，我們所有的規則都應遵循以下核心理念：

1.  **模組化 (Modular)**：每個 `.mdc` 檔案只專注於一個明確的功能或領域（例如路由、API 風格）。避免建立一個無所不包的巨大規則檔案。
2.  **清晰化 (Clear)**：規則首先是為「人」寫的。內容必須清晰、易於理解，讓任何團隊成員都能快速掌握。
3.  **目的導向 (Purpose-Driven)**：每條規則都應該為了解決一個具體問題或建立一個明確的慣例而存在。

---

## 2. 規則的存放與命名

### 2.1 存放位置
所有規則檔案都**必須**存放在專案根目錄的 `.cursor/rules/` 資料夾下。

### 2.2 命名結構
為了方便管理與辨識，所有規則檔案應採用以下命名結構：

**`[scope]-[topic].mdc`**

*   **`scope`**: 規則適用的範圍。常用的 `scope` 包括：
    *   `project`: 通用於整個專案（例如：commit 訊息、版本控制）。
    *   `fe`: 僅適用於前端 (Frontend)。
    *   `be`: 僅適用於後端 (Backend)。
    *   `test`: 僅適用於測試程式碼。
    *   `docs`: 僅適用於文件撰寫。
*   **`topic`**: 規則的主題，簡短描述其內容。

**範例：**
*   `fe-routing.mdc` (前端路由規則)
*   `fe-style-guide.mdc` (前端樣式指南)
*   `project-commit-msg.mdc` (專案的 Git Commit 格式)
*   `test-e2e-writing.mdc` (端對端測試撰寫指南)

---

## 3. 規則的內容結構範本

所有新的規則檔案都應複製以下範本來建立，以確保結構的一致性。

```markdown
# 規則主題：[例如：前端路由管理]

> **簡短描述**：[此規則文件的目的、適用範圍...]
> **最後更新**：YYYY-MM-DD

---

## 1. 核心原則
*   [原則一...]
*   [原則二...]

---

## 2. 程式碼範例 (Do's and Don'ts)

**✅ 正確範例 (Do)**
```typescript
// 說明為何這是正確的寫法
```

**❌ 錯誤範例 (Don't)**
```typescript
// 說明為何這是錯誤的寫法
```
---
```

---

## 4. 規則的應用策略 (Metadata 設定)

規則檔案的 `frontmatter`（開頭的 `---` 區塊）決定了 AI 如何使用它。請根據「重要性-頻率」四象限來選擇最適合的策略：

|                               | **低頻率**                                                                                                                   | **高頻率**                                                                                               |
| :---------------------------- | :--------------------------------------------------------------------------------------------------------------------------- | :------------------------------------------------------------------------------------------------------- |
| **高重要性**                  | <p><strong>第二象限</strong> (策略規劃)</p><p>使用 `description`</p><p>例：`test-e2e-writing.mdc`</p>                            | <p><strong>第一象限</strong> (核心習慣)</p><p>使用 `alwaysApply: true`</p><p>例：`fe-routing.mdc`</p> |
| **低重要性**                  | <p><strong>第四象限</strong> (存檔瑣事)</p><p>不設 `frontmatter` (手動 @ 引用)</p><p>例：`archive-old-api.mdc`</p>             | <p><strong>第三象限</strong> (日常優化)</p><p>使用 `description`</p><p>例：`project-commit-msg.mdc`</p> |

*   **`alwaysApply: true` (第一象限)**：用於專案最核心、每次開發都會用到的習慣。例如我們的 `fe-routing.mdc`。
*   **`description: "..."` (第二、三象限)**：最常用、最有彈性的選項。為規則加上一段精準的描述，讓 AI 能在相關情境下智慧地找到它。
*   **`globs: "..."`**：當規則只適用於特定檔案類型時使用，例如 `globs: "**/*.test.ts"`。
*   **無 `frontmatter` (第四象限)**：用於不常用或已封存的規則，只能透過 `@` 手動引用。