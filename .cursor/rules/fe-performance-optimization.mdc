---
alwaysApply: false
---
# 每次修改本檔案時，都檢查全部範圍內是否存在多處語焉不詳(敘述模糊，請補充具體感)、語意衝突(後話和前話化打架)。如果發現後請指出並與我討論修改內容的去留。

# 前端效能優化指南

簡短描述：本文件定義了前端效能優化的標準做法，包括圖片優化、資源載入策略、快取控制等最佳實踐，確保應用程式的載入速度和使用者體驗。

最後更新：2024-09-28

---

## 核心原則

- **圖片優化優先**：使用 NuxtImg 組件進行自動圖片優化，統一設定屬性確保一致性
- **資源載入策略**：合理使用 preload、preconnect、prefetch 提升關鍵資源載入效率
- **快取策略明確**：針對不同資源類型設定適當的快取策略
- **假圖佔位統一**：使用統一的假圖佔位服務，確保開發和測試環境的一致性

## 圖片優化 (NuxtImg)

### 統一屬性設定

所有 NuxtImg 組件應使用統一的屬性設定：

```vue
<NuxtImg
  class="w-full h-48 object-cover"
  :src="getCardImageSrc(index, card.coverUrl)"
  alt="熱門體驗活動"
  width="768"
  height="192"
  fit="cover"
  quality="90"
  @error="erroredImage[index] = true"
  loading="lazy"
/>
```

### 假圖佔位資源

如有使用假圖佔位的需求，請優先從 https://placehold.co/ 資源取得假圖佔位：

```typescript
// 假圖佔位函式範例
const getPlaceholderImage = (width: number, height: number, text?: string) => {
  const baseUrl = 'https://placehold.co';
  const params = new URLSearchParams({
    w: width.toString(),
    h: height.toString(),
    text: text || `${width}x${height}`,
  });
  return `${baseUrl}/${width}x${height}?${params.toString()}`;
};

// 使用範例
const placeholderSrc = getPlaceholderImage(768, 192, '圖片載入中');
```

### IPX 格式問題

- **外部資源**：指非專案內部的圖片資源，如 CDN 圖片、第三方服務圖片
- **IPX 處理**：NuxtImg 會自動處理 IPX 格式轉換，無需手動設定
- **格式支援**：支援 WebP、AVIF 等現代格式的自動轉換

## 資源存取優化

### preload、preconnect、prefetch 策略

參考資源：https://www.shubo.io/preload-prefetch-preconnect/

#### preload - 關鍵資源預載

用於載入當前頁面必需的關鍵資源：

```vue
<template>
  <Head>
    <!-- 關鍵 CSS -->
    <link rel="preload" href="/css/critical.css" as="style" />
    <!-- 關鍵字體 -->
    <link rel="preload" href="/fonts/main.woff2" as="font" type="font/woff2" crossorigin />
    <!-- 關鍵圖片 -->
    <link rel="preload" href="/images/hero-banner.webp" as="image" />
  </Head>
</template>
```

#### preconnect - DNS 預連接

用於提前建立與第三方服務的連接：

```vue
<template>
  <Head>
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- CDN 服務 -->
    <link rel="preconnect" href="https://cdn.example.com" />
  </Head>
</template>
```

#### prefetch - 未來資源預取

用於預取使用者可能需要的未來資源：

```vue
<template>
  <Head>
    <!-- 下一頁可能需要的資源 -->
    <link rel="prefetch" href="/api/user/profile" />
    <!-- 非關鍵圖片 -->
    <link rel="prefetch" href="/images/gallery/thumb-1.webp" />
  </Head>
</template>
```

## 快取策略

### 靜態資源快取

```typescript
// nuxt.config.ts
export default defineNuxtConfig({
  nitro: {
    routeRules: {
      // 靜態資源長期快取
      '/images/**': { headers: { 'cache-control': 'max-age=31536000' } },
      '/css/**': { headers: { 'cache-control': 'max-age=31536000' } },
      '/js/**': { headers: { 'cache-control': 'max-age=31536000' } },
      // API 資料短期快取
      '/api/**': { headers: { 'cache-control': 'max-age=300' } },
    },
  },
});
```

### 瀏覽器快取控制

```typescript
// 在 composables 中設定快取策略
export const useCachedData = () => {
  const { data } = useFetch('/api/data', {
    key: 'cached-data',
    server: false,
    default: () => null,
    transform: (data: any) => {
      // 資料轉換邏輯
      return data;
    },
  });
  
  return { data };
};
```

---

## 程式碼範例

### ✅ 正確範例：統一的圖片組件

```vue
<template>
  <div class="image-container">
    <NuxtImg
      class="w-full h-48 object-cover rounded-lg"
      :src="imageSrc"
      :alt="altText"
      width="768"
      height="192"
      fit="cover"
      quality="90"
      loading="lazy"
      @error="handleImageError"
    />
  </div>
</template>

<script setup lang="ts">
const props = defineProps<{
  imageSrc: string;
  altText: string;
}>();

const handleImageError = () => {
  // 圖片載入失敗處理
  console.warn('圖片載入失敗:', props.imageSrc);
};
</script>
```

### ✅ 正確範例：資源預載設定

```vue
<template>
  <Head>
    <!-- 關鍵資源預載 -->
    <link rel="preload" href="/css/critical.css" as="style" />
    <link rel="preload" href="/fonts/main.woff2" as="font" type="font/woff2" crossorigin />
    
    <!-- 第三方服務預連接 -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    
    <!-- 未來資源預取 -->
    <link rel="prefetch" href="/api/user/profile" />
  </Head>
</template>
```

### ❌ 錯誤範例：未優化的圖片使用

```vue
<!-- ❌ 直接使用 img 標籤，無優化 -->
<img 
  src="/images/large-banner.jpg" 
  alt="橫幅圖片"
  class="w-full h-48"
/>

<!-- ❌ 未設定適當的尺寸和品質 -->
<NuxtImg
  src="/images/banner.jpg"
  alt="橫幅圖片"
  class="w-full h-48"
/>
```

---

## 其他優化項目

### 程式碼分割

```typescript
// 動態導入組件
const LazyComponent = defineAsyncComponent(() => 
  import('~/components/HeavyComponent.vue')
);

// 路由層級程式碼分割
const router = createRouter({
  routes: [
    {
      path: '/heavy-page',
      component: () => import('~/pages/HeavyPage.vue'),
    },
  ],
});
```

### 關鍵渲染路徑優化

```vue
<template>
  <div>
    <!-- 關鍵內容優先渲染 -->
    <CriticalContent />
    
    <!-- 非關鍵內容延遲載入 -->
    <ClientOnly>
      <NonCriticalContent />
    </ClientOnly>
  </div>
</template>
```

### 效能監控

```typescript
// 在 plugins/web-vitals.client.ts 中監控效能指標
export default defineNuxtPlugin(() => {
  if (import.meta.client) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(console.log);
      getFID(console.log);
      getFCP(console.log);
      getLCP(console.log);
      getTTFB(console.log);
    });
  }
});
```

---

## 注意事項

- 優先使用 NuxtImg 而非原生 img 標籤，享受自動優化功能
- 合理設定 preload、preconnect、prefetch，避免過度預載影響效能
- 針對不同資源類型設定適當的快取策略
- 定期監控 Core Web Vitals 指標，確保使用者體驗品質
- 在開發環境中使用統一的假圖佔位服務，確保視覺一致性